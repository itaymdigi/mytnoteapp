/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Notebook } from "./Notebook";
import { NotebookCountArgs } from "./NotebookCountArgs";
import { NotebookFindManyArgs } from "./NotebookFindManyArgs";
import { NotebookFindUniqueArgs } from "./NotebookFindUniqueArgs";
import { CreateNotebookArgs } from "./CreateNotebookArgs";
import { UpdateNotebookArgs } from "./UpdateNotebookArgs";
import { DeleteNotebookArgs } from "./DeleteNotebookArgs";
import { NoteFindManyArgs } from "../../note/base/NoteFindManyArgs";
import { Note } from "../../note/base/Note";
import { User } from "../../user/base/User";
import { NotebookService } from "../notebook.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Notebook)
export class NotebookResolverBase {
  constructor(
    protected readonly service: NotebookService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Notebook",
    action: "read",
    possession: "any",
  })
  async _notebooksMeta(
    @graphql.Args() args: NotebookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Notebook])
  @nestAccessControl.UseRoles({
    resource: "Notebook",
    action: "read",
    possession: "any",
  })
  async notebooks(
    @graphql.Args() args: NotebookFindManyArgs
  ): Promise<Notebook[]> {
    return this.service.notebooks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Notebook, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Notebook",
    action: "read",
    possession: "own",
  })
  async notebook(
    @graphql.Args() args: NotebookFindUniqueArgs
  ): Promise<Notebook | null> {
    const result = await this.service.notebook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Notebook)
  @nestAccessControl.UseRoles({
    resource: "Notebook",
    action: "create",
    possession: "any",
  })
  async createNotebook(
    @graphql.Args() args: CreateNotebookArgs
  ): Promise<Notebook> {
    return await this.service.createNotebook({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Notebook)
  @nestAccessControl.UseRoles({
    resource: "Notebook",
    action: "update",
    possession: "any",
  })
  async updateNotebook(
    @graphql.Args() args: UpdateNotebookArgs
  ): Promise<Notebook | null> {
    try {
      return await this.service.updateNotebook({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Notebook)
  @nestAccessControl.UseRoles({
    resource: "Notebook",
    action: "delete",
    possession: "any",
  })
  async deleteNotebook(
    @graphql.Args() args: DeleteNotebookArgs
  ): Promise<Notebook | null> {
    try {
      return await this.service.deleteNotebook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Note], { name: "notes" })
  @nestAccessControl.UseRoles({
    resource: "Note",
    action: "read",
    possession: "any",
  })
  async findNotes(
    @graphql.Parent() parent: Notebook,
    @graphql.Args() args: NoteFindManyArgs
  ): Promise<Note[]> {
    const results = await this.service.findNotes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Notebook): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
