/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Notebook as PrismaNotebook,
  Note as PrismaNote,
  User as PrismaUser,
} from "@prisma/client";

export class NotebookServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NotebookCountArgs, "select">): Promise<number> {
    return this.prisma.notebook.count(args);
  }

  async notebooks(
    args: Prisma.NotebookFindManyArgs
  ): Promise<PrismaNotebook[]> {
    return this.prisma.notebook.findMany(args);
  }
  async notebook(
    args: Prisma.NotebookFindUniqueArgs
  ): Promise<PrismaNotebook | null> {
    return this.prisma.notebook.findUnique(args);
  }
  async createNotebook(
    args: Prisma.NotebookCreateArgs
  ): Promise<PrismaNotebook> {
    return this.prisma.notebook.create(args);
  }
  async updateNotebook(
    args: Prisma.NotebookUpdateArgs
  ): Promise<PrismaNotebook> {
    return this.prisma.notebook.update(args);
  }
  async deleteNotebook(
    args: Prisma.NotebookDeleteArgs
  ): Promise<PrismaNotebook> {
    return this.prisma.notebook.delete(args);
  }

  async findNotes(
    parentId: string,
    args: Prisma.NoteFindManyArgs
  ): Promise<PrismaNote[]> {
    return this.prisma.notebook
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notes(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.notebook
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
